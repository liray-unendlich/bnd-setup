name: bento-main

# Anchors:
x-base-environment: &base-environment
  DATABASE_URL: postgresql://${POSTGRES_USER:-worker}:${POSTGRES_PASSWORD:-password}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-taskdb}
  REDIS_URL: redis://redis:6379
  S3_URL: http://minio:9000
  S3_BUCKET: ${MINIO_BUCKET:-workflow}
  S3_ACCESS_KEY: ${MINIO_ROOT_USER:-admin}
  S3_SECRET_KEY: ${MINIO_ROOT_PASS:-password}
  RUST_LOG: ${RUST_LOG:-info}
  RUST_BACKTRACE: 1

x-agent-common: &agent-common
  runtime: nvidia
  build:
    context: .
    dockerfile: ${AGENT_DOCKERFILE:-dockerfiles/agent.prebuilt.dockerfile}
    args:
      BINARY_URL: ${BENTO_BINARY_URL:-https://github.com/boundless-xyz/boundless/releases/download/bento-v1.0.0/bento-bundle-linux-amd64.tar.gz}
  restart: always
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
    minio:
      condition: service_healthy
  environment:
    <<: *base-environment

x-exec-agent-common: &exec-agent-common
  <<: *agent-common
  mem_limit: 4G
  cpus: 3
  environment:
    <<: *base-environment
    LD_LIBRARY_PATH: ${LD_LIBRARY_PATH:-/usr/local/cuda-12.2/compat/}
    RISC0_KECCAK_PO2: ${RISC0_KECCAK_PO2:-17}
  entrypoint: /app/agent -t exec --segment-po2 ${SEGMENT_SIZE:-21} --redis-ttl ${REDIS_TTL:-57600}

x-broker-environment: &broker-environment
  RUST_LOG: ${RUST_LOG:-info,broker=debug,boundless_market=debug}
  PRIVATE_KEY: ${PRIVATE_KEY}
  RPC_URL: ${RPC_URL}
  WS_RPC_URL: ${WS_RPC_URL}
  BOUNDLESS_MARKET_ADDRESS: ${BOUNDLESS_MARKET_ADDRESS}
  SET_VERIFIER_ADDRESS: ${SET_VERIFIER_ADDRESS}
  ORDER_STREAM_URL: ${ORDER_STREAM_URL}
  POSTGRES_HOST: postgres
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_PORT: ${POSTGRES_PORT}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASS: ${POSTGRES_PASSWORD}

x-broker-common: &broker-common
  restart: always
  depends_on:
    rest_api:
      condition: service_healthy
    gpu_prove_agent0:
      condition: service_started
    exec_agent0:
      condition: service_started
    exec_agent1:
      condition: service_started
    aux_agent:
      condition: service_started
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  profiles: [broker]
  build:
    context: .
    dockerfile: ${BROKER_DOCKERFILE:-dockerfiles/broker.prebuilt.dockerfile}
    args:
      BINARY_URL: ${BROKER_BINARY_URL:-https://github.com/boundless-xyz/boundless/releases/download/broker-v1.0.0/broker}
  mem_limit: 2G
  cpus: 2
  stop_grace_period: 3h
  network_mode: host

services:
  # インフラサービス群
  redis:
    hostname: redis
    image: ${REDIS_IMG:-redis:7.2.5-alpine3.19}
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --maxmemory-policy allkeys-lru --save 900 1 --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  postgres:
    hostname: postgres
    image: ${POSTGRES_IMG:-postgres:16.3-bullseye}
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-taskdb}
      POSTGRES_USER: ${POSTGRES_USER:-worker}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command: -p ${POSTGRES_PORT:-5432}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-worker} -d ${POSTGRES_DB:-taskdb}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  minio:
    hostname: minio
    image: ${MINIO_IMG:-minio/minio:RELEASE.2024-05-28T17-19-04Z}
    restart: always
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASS:-password}
      - MINIO_DEFAULT_BUCKETS=${MINIO_BUCKET:-workflow}
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  # APIサービス群
  rest_api:
    build:
      context: .
      dockerfile: ${REST_API_DOCKERFILE:-dockerfiles/rest_api.prebuilt.dockerfile}
      args:
        BINARY_URL: ${BENTO_BINARY_URL:-https://github.com/boundless-xyz/boundless/releases/download/bento-v1.0.0/bento-bundle-linux-amd64.tar.gz}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    mem_limit: 3G
    environment:
      <<: *base-environment
    ports:
      - '8081:8081'
    entrypoint: /app/rest_api --bind-addr 0.0.0.0:8081 --snark-timeout ${SNARK_TIMEOUT:-180}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  exec_agent0:
    <<: *exec-agent-common
    cpus: 2

  exec_agent1:
    <<: *exec-agent-common
    cpus: 2

  exec_agent2:
    <<: *exec-agent-common
    cpus: 2

  exec_agent3:
    <<: *exec-agent-common
    cpus: 2

  exec_agent4:
    <<: *exec-agent-common
    cpus: 2

  exec_agent5:
    <<: *exec-agent-common
    cpus: 2

  aux_agent:
    <<: *agent-common
    mem_limit: 256M
    cpus: 1
    environment:
      <<: *base-environment
      LD_LIBRARY_PATH: ${LD_LIBRARY_PATH:-/usr/local/cuda-12.9/compat/}
    entrypoint: /app/agent -t aux --monitor-requeue --redis-ttl ${REDIS_TTL:-57600}

  snark_agent:
    <<: *agent-common
    mem_limit: 4G
    cpus: 2
    entrypoint: /app/agent -t snark --redis-ttl ${REDIS_TTL:-57600}
    environment:
      <<: *base-environment
      LD_LIBRARY_PATH: ${LD_LIBRARY_PATH:-/usr/local/cuda-12.9/compat/}
    ulimits:
      stack: 90000000

  # /home/bento/work/boundless-custom を使用します
  broker:
    <<: *broker-common
    volumes:
      - type: bind
        source: ./broker.toml
        target: /app/broker.toml
      - broker-data:/db/
    environment:
      <<: *broker-environment
    entrypoint: /app/broker --db-url 'sqlite:///db/broker.db' --config-file /app/broker.toml --bento-api-url http://localhost:8081

volumes:
  redis-data:
  postgres-data:
  minio-data:
  broker-data:
